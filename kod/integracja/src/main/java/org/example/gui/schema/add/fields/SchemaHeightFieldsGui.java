package org.example.gui.schema.add.fields;

import org.example.gui.IntegerDocumentListener;
import org.example.gui.schema.add.SchemaFieldsGuiAbstract;
import org.example.gui.schema.add.field.SchemaField;
import org.example.gui.schema.add.field.SchemaFieldGui;
import org.example.template.row.HeightTemplateRow;
import org.example.template.row.TemplateRow;
import org.example.template.row.TemplateRowType;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;

public class SchemaHeightFieldsGui extends SchemaFieldsGuiAbstract {

    private JPanel mainPanel;
    private JLabel titleLabel;
    private JPanel fieldsPanel;
    private JTextField startStrInput;
    private JTextField endStrInput;
    private JFormattedTextField rowHeightInput;
    private JFormattedTextField skipStartInput;
    private JButton clearSelectionButton;

    public SchemaHeightFieldsGui(String title, List<SchemaField> schemaFields, Consumer<SchemaFieldGui> onSelect) {

        super(title, schemaFields, onSelect);

        $$$setupUI$$$();

        super.setPanel(mainPanel);

        titleLabel.setText(title);

        super.loadFields(fieldsPanel);

        rowHeightInput.getDocument().addDocumentListener(
                new IntegerDocumentListener(rowHeightInput, value -> {
                })
        );

        skipStartInput.getDocument().addDocumentListener(
                new IntegerDocumentListener(skipStartInput, value -> {
                })
        );

        clearSelectionButton.addActionListener(l -> onSelect.accept(null));
    }

    @Override
    public TemplateRow getData() {

        Integer skipStart = getSkipStart();
        float rowHeight = getRowHeight();

        return new HeightTemplateRow(
                TemplateRowType.HORIZONTAL.name(),
                getRowsFields(),
                skipStart,
                startStrInput.getText(),
                endStrInput.getText(),
                rowHeight
        );
    }

    private Integer getSkipStart() {

        String skipStartStr = skipStartInput.getText();

        if (skipStartStr == null || skipStartStr.isEmpty()) {

            return null;
        }

        return Integer.valueOf(skipStartStr);
    }

    private float getRowHeight() {

        String rowHeightStr = rowHeightInput.getText();

        if (rowHeightStr == null || rowHeightStr.isEmpty()) {

            return 10;
        }

        return Float.parseFloat(rowHeightStr);
    }

    @Override
    public JPanel getMainPanel() {

        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setHorizontalAlignment(0);
        titleLabel.setText("Label");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.insets = new Insets(40, 0, 0, 0);
        mainPanel.add(titleLabel, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Zaczyna się po linii");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 0, 0, 0);
        mainPanel.add(label1, gbc);
        endStrInput = new JTextField();
        endStrInput.setMinimumSize(new Dimension(120, 30));
        endStrInput.setPreferredSize(new Dimension(120, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 20, 0, 0);
        mainPanel.add(endStrInput, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Kończy się przy linii");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 0, 0, 0);
        mainPanel.add(label2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Wysokość linii");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 0, 0, 0);
        mainPanel.add(label3, gbc);
        rowHeightInput = new JFormattedTextField();
        rowHeightInput.setMinimumSize(new Dimension(120, 30));
        rowHeightInput.setPreferredSize(new Dimension(120, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 20, 0, 0);
        mainPanel.add(rowHeightInput, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Liczba linii do pominięcia");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 0, 0, 0);
        mainPanel.add(label4, gbc);
        skipStartInput = new JFormattedTextField();
        skipStartInput.setMinimumSize(new Dimension(120, 30));
        skipStartInput.setPreferredSize(new Dimension(120, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 20, 0, 0);
        mainPanel.add(skipStartInput, gbc);
        startStrInput = new JTextField();
        startStrInput.setMinimumSize(new Dimension(120, 30));
        startStrInput.setPreferredSize(new Dimension(120, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 20, 0, 0);
        mainPanel.add(startStrInput, gbc);
        fieldsPanel = new JPanel();
        fieldsPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(fieldsPanel, gbc);
        clearSelectionButton = new JButton();
        clearSelectionButton.setText("Czyszczenie zaznaczenia");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(20, 20, 0, 0);
        mainPanel.add(clearSelectionButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
