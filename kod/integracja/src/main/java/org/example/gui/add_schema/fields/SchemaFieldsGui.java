package org.example.gui.add_schema.fields;

import org.example.gui.ChangeableGui;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.List;
import java.util.Locale;

public class SchemaFieldsGui extends ChangeableGui {

    private JPanel mainPanel;
    private JLabel titleLabel;
    private JPanel fieldsPanel;

    private final List<SchemaField> schemaFields;

    public SchemaFieldsGui(String title, List<SchemaField> schemaFields) {

        this.schemaFields = schemaFields;

        $$$setupUI$$$();

        titleLabel.setText(title);

        loadFields();
    }

    private void loadFields() {

        GridBagConstraints mainPanelLayoutConstrains = new GridBagConstraints();

        for (int i = 0; i < schemaFields.size(); i++) {

            SchemaField schemaField = schemaFields.get(i);

            mainPanelLayoutConstrains.gridx = 0;
            mainPanelLayoutConstrains.gridy = i;
            mainPanelLayoutConstrains.weightx = 1;
            mainPanelLayoutConstrains.weighty = 1;

            SchemaFieldGui schemaFieldGui = new SchemaFieldGui(schemaField);

            fieldsPanel.add(schemaFieldGui.getMainPanel(), mainPanelLayoutConstrains);
        }
    }

    @Override
    public JPanel getMainPanel() {

        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setHorizontalAlignment(0);
        titleLabel.setText("Label");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(40, 0, 0, 0);
        mainPanel.add(titleLabel, gbc);
        fieldsPanel = new JPanel();
        fieldsPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(fieldsPanel, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
